[
    {
        "id": "b7d831285641cc2f",
        "type": "group",
        "z": "4f37c0534953b353",
        "name": "Connection",
        "style": {
            "stroke": "#000000",
            "fill": "#ffdf7f",
            "fill-opacity": "0.51",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "391a979a4a4c1fc1",
            "a60d381e56a54435",
            "9006d213aaee1cd8",
            "3787becc015fa073",
            "45780b6f11f5b99a",
            "90d567eaddb20e3a",
            "c846858f1c91f5de",
            "9ee3b7ccf1147e28",
            "581780d8dc6ccd30",
            "f27781296b87a4af",
            "d78411efa58a63c2",
            "b1366cf025e80e49",
            "5ed4738d9c49d893",
            "5cf302331cd7a710"
        ],
        "x": 44,
        "y": 29,
        "w": 862,
        "h": 242
    },
    {
        "id": "391a979a4a4c1fc1",
        "type": "websocket in",
        "z": "4f37c0534953b353",
        "g": "b7d831285641cc2f",
        "name": "Streaming PC",
        "server": "",
        "client": "eba9febc9d403ba5",
        "x": 140,
        "y": 130,
        "wires": [
            [
                "45780b6f11f5b99a"
            ]
        ]
    },
    {
        "id": "a60d381e56a54435",
        "type": "switch",
        "z": "4f37c0534953b353",
        "g": "b7d831285641cc2f",
        "name": "op switch",
        "property": "payload.op",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 410,
        "y": 130,
        "wires": [
            [
                "9006d213aaee1cd8"
            ],
            [
                "c846858f1c91f5de"
            ],
            [
                "f27781296b87a4af"
            ],
            []
        ]
    },
    {
        "id": "9006d213aaee1cd8",
        "type": "function",
        "z": "4f37c0534953b353",
        "g": "b7d831285641cc2f",
        "name": "Connect",
        "func": "let out = {\n    payload : {\n        \"op\": 1,\n        \"d\": {\n            \"rpcVersion\": 1,\n        }\n    }\n}\n\nif (msg.payload.d.hasOwnProperty(\"authentication\")) {\n    const pass = flow.get(\"OBS_WS_Pass\") || \"\";\n    const salt = msg.payload.d.authentication.salt;\n    const challenge = msg.payload.d.authentication.challenge;\n\n    let auth = pass + salt;\n    auth = crypto.createHash('sha256').update(auth).digest('base64');\n    auth = auth + challenge;\n    auth = crypto.createHash('sha256').update(auth).digest('base64');\n\n    out.payload.d.authentication = auth;\n\n    return out;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 600,
        "y": 110,
        "wires": [
            [
                "3787becc015fa073"
            ]
        ]
    },
    {
        "id": "3787becc015fa073",
        "type": "websocket out",
        "z": "4f37c0534953b353",
        "g": "b7d831285641cc2f",
        "name": "Streaming PC",
        "server": "",
        "client": "eba9febc9d403ba5",
        "x": 800,
        "y": 110,
        "wires": []
    },
    {
        "id": "45780b6f11f5b99a",
        "type": "json",
        "z": "4f37c0534953b353",
        "g": "b7d831285641cc2f",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 280,
        "y": 130,
        "wires": [
            [
                "a60d381e56a54435",
                "581780d8dc6ccd30",
                "b1366cf025e80e49"
            ]
        ]
    },
    {
        "id": "90d567eaddb20e3a",
        "type": "change",
        "z": "4f37c0534953b353",
        "g": "b7d831285641cc2f",
        "name": "Set password",
        "rules": [
            {
                "t": "set",
                "p": "OBS_WS_Pass",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 70,
        "wires": [
            []
        ]
    },
    {
        "id": "c846858f1c91f5de",
        "type": "link out",
        "z": "4f37c0534953b353",
        "g": "b7d831285641cc2f",
        "name": "OBS WS Event",
        "mode": "link",
        "links": [],
        "x": 620,
        "y": 150,
        "wires": [],
        "l": true
    },
    {
        "id": "9ee3b7ccf1147e28",
        "type": "link in",
        "z": "4f37c0534953b353",
        "g": "b7d831285641cc2f",
        "name": "To OBS WS",
        "links": [
            "446dbf62cfadcd2a",
            "311bd7f1bc8187d5",
            "4ba921f923be3b37"
        ],
        "x": 610,
        "y": 70,
        "wires": [
            [
                "3787becc015fa073"
            ]
        ],
        "l": true
    },
    {
        "id": "581780d8dc6ccd30",
        "type": "function",
        "z": "4f37c0534953b353",
        "g": "b7d831285641cc2f",
        "name": "Catch error",
        "func": "const keyExists = (obj, key) => {\n    if (!obj || (typeof obj !== \"object\" && !Array.isArray(obj))) {\n        return false;\n    }\n    else if (obj.hasOwnProperty(key)) {\n        return true;\n    }\n    else if (Array.isArray(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n            const result = keyExists(obj[i], key);\n            if (result) {\n                return result;\n            }\n        }\n    }\n    else {\n        for (const k in obj) {\n            const result = keyExists(obj[k], key);\n            if (result) {\n                return result;\n            }\n        }\n    }\n\n    return false;\n};\n\nif (keyExists(msg, \"code\") && (msg.payload.d.requestStatus.code == 600 || msg.payload.d.requestStatus.code == 300) ){\n    node.warn(msg.payload.d.requestStatus.comment);\n    return { payload: msg.payload.d.requestStatus.comment}\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 190,
        "wires": [
            []
        ]
    },
    {
        "id": "f27781296b87a4af",
        "type": "link out",
        "z": "4f37c0534953b353",
        "g": "b7d831285641cc2f",
        "name": "OBS WS Response",
        "mode": "link",
        "links": [
            "cb3a1099c8ee17d7",
            "beaf401c33a54539"
        ],
        "x": 630,
        "y": 190,
        "wires": [],
        "l": true
    },
    {
        "id": "d78411efa58a63c2",
        "type": "ui_text_input",
        "z": "4f37c0534953b353",
        "g": "b7d831285641cc2f",
        "name": "",
        "label": "Password",
        "tooltip": "",
        "group": "fa5c8bde67ca5f83",
        "order": 1,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "password",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 270,
        "y": 70,
        "wires": [
            [
                "90d567eaddb20e3a"
            ]
        ]
    },
    {
        "id": "b1366cf025e80e49",
        "type": "function",
        "z": "4f37c0534953b353",
        "g": "b7d831285641cc2f",
        "name": "Status",
        "func": "if (msg.payload == \"Ping\") {\n    return { color: \"RED\", status: \"Disconnected\" };\n}\n\nswitch (msg.payload.op) {\n    case 0:\n        return { color: \"RED\", status: \"Disconnected\"};\n    case 2:\n        return [{ color: \"GREEN\", status: \"Connected\" }, {payload : \" OK\"}];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 230,
        "wires": [
            [
                "5ed4738d9c49d893"
            ],
            [
                "5cf302331cd7a710"
            ]
        ]
    },
    {
        "id": "5ed4738d9c49d893",
        "type": "ui_button",
        "z": "4f37c0534953b353",
        "g": "b7d831285641cc2f",
        "name": "Status",
        "group": "fa5c8bde67ca5f83",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "{{status}}",
        "tooltip": "",
        "color": "",
        "bgcolor": "{{color}}",
        "className": "",
        "icon": "",
        "payload": "Ping",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 590,
        "y": 230,
        "wires": [
            [
                "3787becc015fa073",
                "b1366cf025e80e49"
            ]
        ]
    },
    {
        "id": "5cf302331cd7a710",
        "type": "link out",
        "z": "4f37c0534953b353",
        "g": "b7d831285641cc2f",
        "name": "OBS WS Connected",
        "mode": "link",
        "links": [
            "d796c8c1af455c17"
        ],
        "x": 780,
        "y": 230,
        "wires": [],
        "l": true
    },
    {
        "id": "eba9febc9d403ba5",
        "type": "websocket-client",
        "path": "ws://192.168.178.10:4455",
        "tls": "",
        "wholemsg": "false",
        "hb": "0",
        "subprotocol": ""
    },
    {
        "id": "fa5c8bde67ca5f83",
        "type": "ui_group",
        "name": "GUI",
        "tab": "5350a631ffc439cd",
        "order": 1,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5350a631ffc439cd",
        "type": "ui_tab",
        "name": "OBS WS 5.X",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e4d9dcea1805da58",
        "type": "group",
        "z": "4f37c0534953b353",
        "name": "Dashboard",
        "style": {
            "stroke": "#000000",
            "label": true,
            "color": "#000000",
            "fill": "#7fb7df",
            "fill-opacity": "0.53"
        },
        "nodes": [
            "87ae5bf497f558e4",
            "d796c8c1af455c17",
            "368488e84b04fc6c",
            "08d191774a5c01c9",
            "beaf401c33a54539",
            "644a4db75e414ea9",
            "a759eb0ea8cf84f2",
            "cb7af8b0d9783aa3",
            "6c4f44a4d0174315",
            "c4e720a5c2fe6554",
            "c8295bac8b3ff114",
            "41e0a6a79e00ca34",
            "c8946ab5e7f5b9fe",
            "5882266509ef2c81",
            "c9528eb7593ad503",
            "4ba921f923be3b37",
            "0493d3a8faa0fd62",
            "92796fc7273ccb22",
            "407b659a02e9dd50",
            "4de83eed3b96de6c"
        ],
        "x": 44,
        "y": 289,
        "w": 1052,
        "h": 412
    },
    {
        "id": "87ae5bf497f558e4",
        "type": "function",
        "z": "4f37c0534953b353",
        "g": "e4d9dcea1805da58",
        "name": "Get scene list",
        "func": "msg.payload = {\n    \"op\": 6,\n    \"d\": {\n        \"requestType\": \"GetSceneList\",\n        \"requestId\": msg._msgid\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 330,
        "wires": [
            [
                "4ba921f923be3b37"
            ]
        ]
    },
    {
        "id": "d796c8c1af455c17",
        "type": "link in",
        "z": "4f37c0534953b353",
        "g": "e4d9dcea1805da58",
        "name": "OBS WS connected",
        "links": [
            "5cf302331cd7a710"
        ],
        "x": 160,
        "y": 330,
        "wires": [
            [
                "87ae5bf497f558e4",
                "368488e84b04fc6c"
            ]
        ],
        "l": true
    },
    {
        "id": "368488e84b04fc6c",
        "type": "function",
        "z": "4f37c0534953b353",
        "g": "e4d9dcea1805da58",
        "name": "Get input list",
        "func": "msg.payload = {\n    \"op\": 6,\n    \"d\": {\n        \"requestType\": \"GetInputList\",\n        \"requestId\": msg._msgid\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 370,
        "wires": [
            [
                "4ba921f923be3b37"
            ]
        ]
    },
    {
        "id": "08d191774a5c01c9",
        "type": "inject",
        "z": "4f37c0534953b353",
        "g": "e4d9dcea1805da58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 370,
        "wires": [
            [
                "368488e84b04fc6c"
            ]
        ]
    },
    {
        "id": "beaf401c33a54539",
        "type": "link in",
        "z": "4f37c0534953b353",
        "g": "e4d9dcea1805da58",
        "name": "OBS WS resp",
        "links": [
            "f27781296b87a4af"
        ],
        "x": 140,
        "y": 440,
        "wires": [
            [
                "644a4db75e414ea9",
                "a759eb0ea8cf84f2"
            ]
        ],
        "l": true
    },
    {
        "id": "644a4db75e414ea9",
        "type": "function",
        "z": "4f37c0534953b353",
        "g": "e4d9dcea1805da58",
        "name": "Extract scene list",
        "func": "const input = msg;\nif (input.payload.d.requestType == \"GetSceneList\"){\n    msg = { options: [] }\n    for (const scene of input.payload.d.responseData.scenes) {\n        msg.options.push(scene.sceneName);\n    }\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 440,
        "wires": [
            [
                "cb7af8b0d9783aa3"
            ]
        ]
    },
    {
        "id": "a759eb0ea8cf84f2",
        "type": "function",
        "z": "4f37c0534953b353",
        "g": "e4d9dcea1805da58",
        "name": "Extract audio sources",
        "func": "const input = msg;\nif (input.payload.d.requestType == \"GetInputList\"){\n    msg = { options: [] }\n    for (const source of input.payload.d.responseData.inputs) {\n        if (source.inputKind == \"wasapi_input_capture\" || source.inputKind == \"wasapi_output_capture\")\n            msg.options.push(source.inputName);\n    }\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 480,
        "wires": [
            [
                "6c4f44a4d0174315"
            ]
        ]
    },
    {
        "id": "cb7af8b0d9783aa3",
        "type": "ui_dropdown",
        "z": "4f37c0534953b353",
        "g": "e4d9dcea1805da58",
        "name": "",
        "label": "Scene list",
        "tooltip": "",
        "place": "Select option",
        "group": "fa5c8bde67ca5f83",
        "order": 3,
        "width": 8,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 560,
        "y": 440,
        "wires": [
            [
                "c4e720a5c2fe6554"
            ]
        ]
    },
    {
        "id": "6c4f44a4d0174315",
        "type": "ui_dropdown",
        "z": "4f37c0534953b353",
        "g": "e4d9dcea1805da58",
        "name": "",
        "label": "Audio source",
        "tooltip": "",
        "place": "Select option",
        "group": "fa5c8bde67ca5f83",
        "order": 6,
        "width": 8,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 570,
        "y": 480,
        "wires": [
            [
                "c8295bac8b3ff114"
            ]
        ]
    },
    {
        "id": "c4e720a5c2fe6554",
        "type": "function",
        "z": "4f37c0534953b353",
        "g": "e4d9dcea1805da58",
        "name": "Switch scene",
        "func": "return {\n    payload: {\n        \"op\": 6,\n        \"d\": {\n            \"requestType\": \"SetCurrentProgramScene\",\n            \"requestId\": msg._msgid,\n            \"requestData\": {\n                \"sceneName\": msg.payload\n            }\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 440,
        "wires": [
            [
                "4ba921f923be3b37"
            ]
        ]
    },
    {
        "id": "c8295bac8b3ff114",
        "type": "change",
        "z": "4f37c0534953b353",
        "g": "e4d9dcea1805da58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "audiosource",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 480,
        "wires": [
            [
                "4ba921f923be3b37"
            ]
        ]
    },
    {
        "id": "41e0a6a79e00ca34",
        "type": "ui_button",
        "z": "4f37c0534953b353",
        "g": "e4d9dcea1805da58",
        "name": "",
        "group": "fa5c8bde67ca5f83",
        "order": 7,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Toggle",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 550,
        "y": 520,
        "wires": [
            [
                "c8946ab5e7f5b9fe"
            ]
        ]
    },
    {
        "id": "c8946ab5e7f5b9fe",
        "type": "function",
        "z": "4f37c0534953b353",
        "g": "e4d9dcea1805da58",
        "name": "Mute audio source",
        "func": "return {\n    payload: {\n        \"op\": 6,\n        \"d\": {\n            \"requestType\": \"ToggleInputMute\",\n            \"requestId\": msg._msgid,\n            \"requestData\": {\n                \"inputName\": flow.get(\"audiosource\")\n            }\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 520,
        "wires": [
            [
                "4ba921f923be3b37"
            ]
        ]
    },
    {
        "id": "5882266509ef2c81",
        "type": "function",
        "z": "4f37c0534953b353",
        "g": "e4d9dcea1805da58",
        "name": "Set volume",
        "func": "return {\n    payload: {\n        \"op\": 6,\n        \"d\": {\n            \"requestType\": \"SetInputVolume\",\n            \"requestId\": msg._msgid,\n            \"requestData\": {\n                \"inputName\": flow.get(\"audiosource\"),\n                \"inputVolumeDb\" : msg.payload\n            }\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 560,
        "wires": [
            [
                "4ba921f923be3b37"
            ]
        ]
    },
    {
        "id": "c9528eb7593ad503",
        "type": "ui_slider",
        "z": "4f37c0534953b353",
        "g": "e4d9dcea1805da58",
        "name": "",
        "label": "Volume",
        "tooltip": "",
        "group": "fa5c8bde67ca5f83",
        "order": 8,
        "width": 6,
        "height": 1,
        "passthru": true,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "min": "-100",
        "max": "0",
        "step": "1",
        "className": "",
        "x": 560,
        "y": 560,
        "wires": [
            [
                "5882266509ef2c81"
            ]
        ]
    },
    {
        "id": "4ba921f923be3b37",
        "type": "link out",
        "z": "4f37c0534953b353",
        "g": "e4d9dcea1805da58",
        "name": "OBS WS",
        "mode": "link",
        "links": [
            "9ee3b7ccf1147e28"
        ],
        "x": 1010,
        "y": 470,
        "wires": [],
        "l": true
    },
    {
        "id": "0493d3a8faa0fd62",
        "type": "ui_text_input",
        "z": "4f37c0534953b353",
        "g": "e4d9dcea1805da58",
        "name": "",
        "label": "Text source",
        "tooltip": "",
        "group": "fa5c8bde67ca5f83",
        "order": 4,
        "width": 4,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "txtsource",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 570,
        "y": 620,
        "wires": [
            [
                "92796fc7273ccb22"
            ]
        ]
    },
    {
        "id": "92796fc7273ccb22",
        "type": "function",
        "z": "4f37c0534953b353",
        "g": "e4d9dcea1805da58",
        "name": "Flow save Topic/Payload",
        "func": "flow.set(msg.topic, msg.payload)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "407b659a02e9dd50",
        "type": "ui_text_input",
        "z": "4f37c0534953b353",
        "g": "e4d9dcea1805da58",
        "name": "",
        "label": "Text value",
        "tooltip": "",
        "group": "fa5c8bde67ca5f83",
        "order": 5,
        "width": 4,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "txtvalue",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 560,
        "y": 660,
        "wires": [
            [
                "92796fc7273ccb22",
                "4de83eed3b96de6c"
            ]
        ]
    },
    {
        "id": "4de83eed3b96de6c",
        "type": "function",
        "z": "4f37c0534953b353",
        "g": "e4d9dcea1805da58",
        "name": "Edit Text",
        "func": "return {\n    payload: {\n        \"op\": 6,\n        \"d\": {\n            \"requestType\": \"SetInputSettings\",\n            \"requestId\": msg._msgid,\n            \"requestData\": {\n                \"inputName\": flow.get(\"txtsource\"),\n                \"inputSettings\" : {\n                    \"text\" : flow.get(\"txtvalue\")\n                }\n            }\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 660,
        "wires": [
            [
                "4ba921f923be3b37"
            ]
        ]
    }
]